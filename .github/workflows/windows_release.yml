name: Windows Release

on:
  push:
    branches:
      - 'master'
      - 'continuous-integration'
    tags:
      - 'v*'
  pull_request:
    branches:
    - 'master'
    - 'continuous-integration'

defaults:
  run:
    shell: cmd

env:
  SOURCE_DIR:   ${{ github.workspace }}
  QT_VERSION:   5.15.2
  ARTIFACT:     capture2text_win64.zip
  TESS_VERSION: "0.0.8-beta"

jobs:
  build:
    runs-on:  windows-2019

    steps:
      - name: (1) Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: (2) Get all tags for correct version determination
        working-directory:  ${{ github.workspace }}
        run: |
          git fetch --all --tags -f

      - name: (3b) Setup OpenCV 4
        uses: UrielCh/opencv-cache-action@V1
        with:
          # branch to checkout default is 4.x
          branch: "4.x" # default is 4.x

      - name: (3c1) Restore from cache and install vcpkg
        uses: lukka/run-vcpkg@v11.1
        with:
          vcpkgGitCommitId: "64adda19c86e89526b5e27703a193c14477cce07"
          vcpkgGitURL: https://github.com/shimat/vcpkg.git

      - name: (3c2) Vcpkg Install
        shell: powershell
        run: |
          echo ${env:VCPKG_ROOT}
          & ${env:VCPKG_ROOT}\vcpkg install tesseract:x64-windows-static

      - name: (3c3) Vcpkg Export
        shell: powershell
        run: |
          & ${env:VCPKG_ROOT}\vcpkg export tesseract:x64-windows-static --zip --output=tesseract_vcpkg.${env:TESS_VERSION}
          xcopy ${env:VCPKG_ROOT}\tesseract_vcpkg.${env:TESS_VERSION}.zip .
          dir /b /s

        # You may pin to the exact commit or the version.
        # uses: TralahM/setup-opencv-action@6f7770c6898f7b4113503f1b34c850645f6a07b0
        #uses: TralahM/setup-opencv-action@v1.2
        #with:
          # OpenCV version to be installed.
          #opencv-version: 4.0.0 # default is 4.0.0
          #install-deps: false
          #WITH_TBB: false
          #WITH_IPP: false
          # If dependencies should be installed as well.
          #install-deps: # optional, default is true
          #CMAKE_BUILD_TYPE: # optional, default is RELEASE
          #BUILD_NEW_PYTHON_SUPPORT: # optional
          #WITH_QT: false # optional

      # TODO: install dependency: lept (? pvt.cppan.demo.danbloomberg.leptonica-1.74.4)
      # TODO: install dependency: tesseract 4.0.0 (? tesseract400)

      - name: (3) Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version:      ${{ env.QT_VERSION }}
          host:         windows
          target:       desktop
          arch:         win64_msvc2019_64
          dir:          ${{ runner.temp }}
          modules:      qtcharts qt3d
          setup-python: false

      - name: (4) Download JOM
        uses: suisei-cn/actions-download-file@v1
        with:
          url:    http://download.qt.io/official_releases/jom/jom.zip
          target: ${{ runner.temp }}\

      - name: (5) Unzip JOM
        working-directory: ${{ runner.temp }}
        run:  |
              7z x jom.zip -ojom
              
      - name: (6) Create build directory
        run:  mkdir ${{ runner.temp }}\build

      - name: (7) Set up Visual Studio shell
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: (8) Build
        working-directory: ${{ runner.temp }}\build
        run:  |
              qmake -r ${{ env.SOURCE_DIR }}\Capture2Text.pro
              ${{ runner.temp }}\jom\jom -j2
              cd release
              windeployqt --qmldir ${{ env.SOURCE_DIR }} Capture2Text.exe --pdb --release --compiler-runtime
              copy C:\Windows\System32\concrt140.dll . 
              copy C:\Windows\System32\vccorlib140.dll .
              copy C:\Windows\System32\msvcp140.dll .
              copy C:\Windows\System32\vcruntime140.dll .
              
      - name: (9) Zip build
        working-directory: ${{ runner.temp }}
        run:  |
              7z a ${{ env.ARTIFACT }} ${{ runner.temp }}\build\* -r
              
      - name: (10) Save build artifact
        uses: actions/upload-artifact@master
        with:
          name: ${{ env.ARTIFACT }}
          path: ${{ runner.temp }}\${{ env.ARTIFACT }}
